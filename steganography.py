import numpy as np
from PIL import Image
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

def encrypt_data(data: bytes, key: bytes) -> bytes:
    """–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ AES-256-GCM"""
    nonce = os.urandom(12)
   
    cipher = Cipher(algorithms.AES(key), modes.GCM(nonce), backend=default_backend())
    encryptor = cipher.encryptor()
   
    encrypted = encryptor.update(data) + encryptor.finalize()
    return nonce + encryptor.tag + encrypted

def decrypt_data(encrypted_data: bytes, key: bytes) -> bytes:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ AES-256-GCM"""
    nonce = encrypted_data[:12]
    tag = encrypted_data[12:28]
    ciphertext = encrypted_data[28:]
   
    cipher = Cipher(algorithms.AES(key), modes.GCM(nonce, tag), backend=default_backend())
    decryptor = cipher.decryptor()
   
    return decryptor.update(ciphertext) + decryptor.finalize()

def hide_data(image_path: str, data: str, output_path: str, encrypt: bool = False) -> bool:
    """–°–ø—Ä—è—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if encrypt:
            key = os.urandom(32)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
            data_bytes = encrypt_data(data.encode(), key)
            print(f"üîë –ö–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {key.hex()}")
        else:
            data_bytes = data.encode()
            key = None
       
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∏ —Ñ–ª–∞–≥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encrypt_flag = b'\x01' if encrypt else b'\x00'
        header = b"STEG" + encrypt_flag + len(data_bytes).to_bytes(4, 'big')
        full_data = header + data_bytes
       
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(image_path)
        img = img.convert('RGB')
        pixels = np.array(img)
       
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        max_data_size = (pixels.size * 3) // 8
        if len(full_data) > max_data_size:
            raise ValueError(f"–î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ú–∞–∫—Å–∏–º—É–º: {max_data_size} –±–∞–π—Ç")
       
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∏—Ç—ã
        data_bits = []
        for byte in full_data:
            bits = bin(byte)[2:].zfill(8)
            data_bits.extend([int(bit) for bit in bits])
       
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ LSB
        data_index = 0
        for i in range(pixels.shape[0]):
            for j in range(pixels.shape[1]):
                for k in range(3):
                    if data_index < len(data_bits):
                        pixels[i, j, k] = (pixels[i, j, k] & 0xFE) | data_bits[data_index]
                        data_index += 1
       
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        Image.fromarray(pixels).save(output_path)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–ø—Ä—è—Ç–∞–Ω—ã –≤: {output_path}")
        return True
       
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def extract_data(image_path: str, key_hex: str = None) -> str:
    """–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(image_path)
        pixels = np.array(img.convert('RGB'))
       
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        extracted_bits = []
        for i in range(pixels.shape[0]):
            for j in range(pixels.shape[1]):
                for k in range(3):
                    extracted_bits.append(pixels[i, j, k] & 1)
       
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏—Ç—ã –≤ –±–∞–π—Ç—ã
        extracted_bytes = bytearray()
        for i in range(0, len(extracted_bits), 8):
            if i + 8 > len(extracted_bits):
                break
            byte_bits = extracted_bits[i:i+8]
            byte_val = int(''.join(str(bit) for bit in byte_bits), 2)
            extracted_bytes.append(byte_val)
       
        # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
        data_start = -1
        for i in range(len(extracted_bytes) - 8):
            if extracted_bytes[i:i+4] == b'STEG':
                data_start = i + 5  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º STEG + —Ñ–ª–∞–≥
                break
       
        if data_start == -1:
            return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
       
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encrypt_flag = extracted_bytes[data_start-1] == 1
        data_length = int.from_bytes(extracted_bytes[data_start:data_start+4], 'big')
        data_bytes = bytes(extracted_bytes[data_start+4:data_start+4+data_length])
       
        if encrypt_flag:
            if not key_hex:
                key_hex = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (hex): ").strip()
            try:
                key = bytes.fromhex(key_hex)
                decrypted = decrypt_data(data_bytes, key)
                return decrypted.decode('utf-8')
            except:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã"
        else:
            return data_bytes.decode('utf-8')
           
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    print("üîê –°–¢–ï–ì–ê–ù–û–ì–†–ê–§–ò–Ø")
    print("=" * 40)
   
    action = input("–î–µ–π—Å—Ç–≤–∏–µ (1 - —Å–ø—Ä—è—Ç–∞—Ç—å, 2 - –∏–∑–≤–ª–µ—á—å): ").strip()
   
    if action == "1":
        image_path = input("–í –∫–∞–∫–æ–π —Ñ–∞–π–ª –≤—à–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?: ").strip()
        data = input("–ö–∞–∫—É—é —Å—Ç—Ä–æ–∫—É –≤—à–∏—Ç—å?: ").strip()
        encrypt = input("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å AES-256-GCM? (y/n): ").strip().lower() == 'y'
        output_path = input("–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?: ").strip()
       
        hide_data(image_path, data, output_path, encrypt)
       
    elif action == "2":
        image_path = input("–ò–∑ –∫–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–≤–ª–µ—á—å?: ").strip()
        result = extract_data(image_path)
        print(f"üì© –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
       
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

if __name__ == "__main__":
    main()