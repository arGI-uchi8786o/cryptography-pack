import secrets
import hashlib
import os

class ShamirSecretSharing:
    def __init__(self, prime=None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–æ–π –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ª—è
        if prime is None:
            # 2^256 - 189 (–±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç–æ–µ)
            self.prime = 2**256 - 189
        else:
            self.prime = prime

    def _mod_inverse(self, a, m):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –º–æ–¥—É–ª—é"""
        m0, y, x = m, 0, 1
        if m == 1:
            return 0
        while a > 1:
            q = a // m
            m, a = a % m, m
            y, x = x - q * y, y
        if x < 0:
            x += m0
        return x

    def _eval_polynomial(self, coeffs, x):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∏–Ω–æ–º–∞ –≤ —Ç–æ—á–∫–µ x"""
        result = 0
        for coeff in reversed(coeffs):
            result = (result * x + coeff) % self.prime
        return result

    def _interpolate(self, points, x=0):
        """–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –õ–∞–≥—Ä–∞–Ω–∂–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞"""
        result = 0
        for i, (xi, yi) in enumerate(points):
            term = yi
            for j, (xj, _) in enumerate(points):
                if i != j:
                    # term *= (x - xj) / (xi - xj)
                    numerator = (x - xj) % self.prime
                    denominator = (xi - xj) % self.prime
                    denominator_inv = self._mod_inverse(denominator, self.prime)
                    term = (term * numerator * denominator_inv) % self.prime
            result = (result + term) % self.prime
        return result

    def split_secret(self, secret, n, k):
        """
        –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –Ω–∞ n –¥–æ–ª–µ–π, –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ k –¥–æ–ª–µ–π

        Args:
            secret: –°–µ–∫—Ä–µ—Ç (bytes –∏–ª–∏ str)
            n: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–µ–π
            k: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–µ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (x, share)
        """
        if isinstance(secret, str):
            secret = secret.encode('utf-8')

        # –•–µ—à–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–∞
        secret_hash = hashlib.sha256(secret).digest()
        secret_int = int.from_bytes(secret_hash, 'big') % self.prime

        if secret_int == 0:
            secret_int = 1  # –ò–∑–±–µ–≥–∞–µ–º –Ω—É–ª–µ–≤–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ–ª–∏–Ω–æ–º–∞ (—Å—Ç–µ–ø–µ–Ω—å k-1)
        coeffs = [secret_int] + [secrets.randbelow(self.prime) for _ in range(k-1)]

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ª–∏
        shares = []
        for x in range(1, n+1):
            y = self._eval_polynomial(coeffs, x)
            shares.append((x, y))

        return shares

    def reconstruct_secret(self, shares, original_secret=None):
        """
        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ –¥–æ–ª–µ–π

        Args:
            shares: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (x, share)
            original_secret: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç (bytes)
        """
        if len(shares) < 2:
            raise ValueError("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –¥–æ–ª–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç
        secret_int = self._interpolate(shares)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ bytes
        secret_bytes = secret_int.to_bytes((secret_int.bit_length() + 7) // 8, 'big')

        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if original_secret:
            if isinstance(original_secret, str):
                original_secret = original_secret.encode('utf-8')
            original_hash = hashlib.sha256(original_secret).digest()
            reconstructed_hash = hashlib.sha256(secret_bytes).digest()
            if original_hash != reconstructed_hash:
                raise ValueError("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º")

        return secret_bytes

def main():
    print("üîê Shamir's Secret Sharing")
    print("=" * 40)
    shamir = ShamirSecretSharing()

    choise = input("–ß—Ç–æ –Ω—É–∂–Ω–æ - –≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç/—Ä–∞–∑–¥–µ–ª–∏—Ç—å(–≤–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - 1 —Ä–∞–∑–¥–µ–ª–∏—Ç—å - 2)")

    if choise == '1':
        selected_shares = []
        for i in range(k):
            x = int(input(f"–í–≤–µ–¥–∏—Ç–µ x –¥–ª—è –¥–æ–ª–∏ {i+1}: ").strip())
            y = int(input(f"–í–≤–µ–¥–∏—Ç–µ y –¥–ª—è –¥–æ–ª–∏ {i+1}: ").strip())
            selected_shares.append((x, y))


        try:
            reconstructed = shamir.reconstruct_secret(selected_shares, secret)
            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {reconstructed.decode('utf-8', errors='ignore')}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    elif choise == '2':
        secret = input("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç: ").strip()
        n = int(input("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–µ–π (n): ").strip())
        k = int(input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–µ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (k): ").strip())

        if k > n:
            print("‚ùå k –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ n!")
            return
        

        print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ª–µ–π...")
        shares = shamir.split_secret(secret, n, k)
        
        print("–î–æ–ª–∏:")
        for x, y in shares:
            print(f"–î–æ–ª—è {x}: {y}")
            print(f"\n–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {k} –¥–æ–ª–µ–π –∏–∑ {n}")

    

if __name__ == "__main__":
    main()
