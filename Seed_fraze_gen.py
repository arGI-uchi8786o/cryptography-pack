import os
import hashlib
import secrets

def secure_shuffle(lst):
    """
    –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∞—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º secrets
    """
    for i in range(len(lst) - 1, 0, -1):
        j = secrets.randbelow(i + 1)
        lst[i], lst[j] = lst[j], lst[i]

def load_words_from_file(filename):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
    """
    words_list = []
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            for line in f:
                word = line.strip()
                if word:
                    words_list.append(word)
        return words_list
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞
RUSSIAN_WORDS = load_words_from_file('words.txt')
secure_shuffle(RUSSIAN_WORDS)
def generate_seed_phrase(word_count=12):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–∏–Ω–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–π —Å–∏–¥-—Ñ—Ä–∞–∑—ã –∏–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
    """
    if len(RUSSIAN_WORDS) < 2048:
        raise ValueError(f"–°–ª–æ–≤–∞—Ä—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2048 —Å–ª–æ–≤! –°–µ–π—á–∞—Å: {len(RUSSIAN_WORDS)}")
   
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é
    entropy = secrets.token_bytes(16)
    hash_bytes = hashlib.sha256(entropy).digest()
   
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∏—Ç—ã
    entropy_bits = ''.join([format(byte, '08b') for byte in entropy])
    checksum_bits = format(hash_bytes[0], '08b')[:4]
    total_bits = entropy_bits + checksum_bits
   
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 11 –±–∏—Ç
    indices = []
    for i in range(0, len(total_bits), 11):
        chunk = total_bits[i:i+11]
        if len(chunk) < 11:
            chunk = chunk.ljust(11, '0')
        index = int(chunk, 2)
        indices.append(index)
   
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞
    seed_phrase = []
    for index in indices:
        seed_phrase.append(RUSSIAN_WORDS[index % len(RUSSIAN_WORDS)])
   
    return ' '.join(seed_phrase)

def main():
    print(len(RUSSIAN_WORDS))
    print("üá∑üá∫ –ì–ï–ù–ï–†–ê–¢–û–† –°–ò–î-–§–†–ê–ó –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï")
    print("=" * 50)
   
    if len(RUSSIAN_WORDS) < 2048:
        print(f"‚ùå –û—à–∏–±–∫–∞: –í —Å–ª–æ–≤–∞—Ä–µ —Ç–æ–ª—å–∫–æ {len(RUSSIAN_WORDS)} —Å–ª–æ–≤, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2048")
        return
   
    try:
        seed_phrase = generate_seed_phrase()
       
        print("üé≤ –í–∞—à–∞ —Å–∏–¥-—Ñ—Ä–∞–∑–∞:")
        print("=" * 50)
        print(seed_phrase)
        print("=" * 50)
       
        words = seed_phrase.split()
        for i in range(0, len(words), 4):
            group = words[i:i+4]
            print(f"{i+1:2d}-{i+len(group):2d}: {' '.join(group)}")
       
        print("=" * 50)
        print("‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ! –ù–∏–∫–æ–º—É –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ!")
           
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()