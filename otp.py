import secrets
import os
import base64
from pathlib import Path

def ideal_otp_encrypt(data: bytes) -> tuple[bytes, bytes]:
    """
    –ò–¥–µ–∞–ª—å–Ω–∞—è —ç—Ç–∞–ª–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è OTP —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∫–ª—é—á, —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç)
    """
    if not data:
        return b'', b''

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–∏–Ω–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞ —Ç–æ–π –∂–µ –¥–ª–∏–Ω—ã
    key = secrets.token_bytes(len(data))

    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ XOR
    ciphertext = bytes([d ^ k for d, k in zip(data, key)])

    return key, ciphertext

def encrypt_file(filename: str):
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–¥–µ–∞–ª—å–Ω—ã–º OTP"""
    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(filename, 'rb') as f:
            plaintext = f.read()

        if not plaintext:
            print("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π!")
            return

        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        key, ciphertext = ideal_otp_encrypt(plaintext)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        base_name = Path(filename).stem
        key_filename = f"{base_name}_password.enc"
        enc_filename = f"{base_name}.otp.enc"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞
        with open(key_filename, 'wb') as f:
            f.write(key)

        with open(enc_filename, 'wb') as f:
            f.write(ciphertext)

        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!")
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {filename} ({len(plaintext)} –±–∞–π—Ç)")
        print(f"üîë –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {key_filename}")
        print(f"üîí –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {enc_filename}")
        print(f"üéØ –≠–Ω—Ç—Ä–æ–ø–∏—è –∫–ª—é—á–∞: {calculate_entropy(key):.6f} –±–∏—Ç/–±–∞–π—Ç")

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

def encrypt_text():
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≤–≤–æ–¥–∞"""
    text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ")

    if not text:
        print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    plaintext = text.encode('utf-8')
    key, ciphertext = ideal_otp_encrypt(plaintext)

    print("\n" + "="*50)
    print("üîê –†–ï–ó–£–õ–¨–¢–ê–¢ –®–ò–§–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
    print(f"üîë –ö–ª—é—á (Base64): {base64.b64encode(key).decode('utf-8')}")
    print(f"üîí –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç (Base64): {base64.b64encode(ciphertext).decode('utf-8')}")
    print(f"üìä –î–ª–∏–Ω–∞: {len(plaintext)} –±–∞–π—Ç")
    print(f"üéØ –≠–Ω—Ç—Ä–æ–ø–∏—è –∫–ª—é—á–∞: {calculate_entropy(key):.6f} –±–∏—Ç/–±–∞–π—Ç")
    print("="*50)

def calculate_entropy(data: bytes) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é –®–µ–Ω–Ω–æ–Ω–∞"""
    from math import log2
    if not data:
        return 0.0

    byte_counts = [0] * 256
    for byte in data:
        byte_counts[byte] += 1

    entropy = 0.0
    for count in byte_counts:
        if count > 0:
            p = count / len(data)
            entropy -= p * log2(p)

    return entropy

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*60)
    print("üîê IDEAL OTP ENCRYPTOR - –≠–¢–ê–õ–û–ù–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø OTP")
    print("="*60)
    print("1. üìÅ –®–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
    print("2. ‚å®Ô∏è –®–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
    print("="*60)

    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1 –∏–ª–∏ 2): ").strip()

        if choice == '1':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ").strip()
            encrypt_file(filename)
            break
        elif choice == '2':
            encrypt_text()
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")

if __name__ == "__main__":
    main()